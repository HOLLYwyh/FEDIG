"""
- RQ5
- This file retrains the models with individual discriminatory instances(img).
"""

import os
import cv2
import joblib
import numpy as np
import pandas as pd
from tensorflow import keras
from sklearn.model_selection import train_test_split
from keras.models import load_model


# load images
def load_image(image_path, file_names, dsize):
    images = []
    for file_name in file_names:
        file_path = os.path.join(image_path, file_name)
        img = cv2.resize(cv2.imread(file_path), dsize)
        images.append(img)
    return np.array(images)


# we randomly sample some IDIs generated by FEDIG for retraining
def retraining(model, x_train, x_test, y_train, y_test, idi, image_path, dsize, dataset_name, model_type, idi_len):
    selected_indices = np.random.choice(idi.shape[0], size=idi_len, replace=False)
    idi_selected = idi[selected_indices, :]

    x_train = load_image(image_path, x_train, dsize)
    x_test = load_image(image_path, x_test, dsize)
    classifier = joblib.load('../models/ensemble_models/' + dataset_name + '_ensemble.pkl')
    vote_label = classifier.predict(idi_selected.reshape(idi_selected.shape[0], -1))

    x_train = np.append(x_train, idi_selected, axis=0)
    y_train = np.append(y_train, vote_label, axis=0)
    x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.2, random_state=821)

    model.fit(x_train, y_train, epochs=50, validation_data=(x_val, y_val),
              callbacks=[keras.callbacks.EarlyStopping(patience=10)])
    loss, acc = model.evaluate(np.array(x_test), np.array(y_test))
    print(f"loss: {loss}, acc: {acc}")
    model.save('../models/retrained_models/' + dataset_name + '_' + model_type + '_retrained_model.h5')


# load models
ca_model_path = '../models/trained_models/celeba_model.h5'
ff_model_path = '../models/trained_models/FairFace_model.h5'
ca_model = load_model(ca_model_path)
ff_model = load_model(ff_model_path)

# load the dataset
ca_image_path = '../datasets/celebA/img_align_celeba/'
ca_label_path = '../datasets/celebA/Anno/list_attr_celeba.txt'
ff_image_path = '../datasets/FairFace/train/'
ff_label_path = '../datasets/FairFace/'

# labels
ca_labels = []
with open(ca_label_path, 'r') as file:
    file.readline()
    file.readline()
    lines = file.readlines()
    for idx, line in enumerate(lines):
        data = [x for x in line.strip().split(' ') if x != ''][1:]
        ca_labels.append(data[20])
ca_labels = np.array([0 if val == '-1' else 1 for val in ca_labels])

ff_df = pd.read_csv(ff_label_path + 'fairface_label_train.csv', sep=',')
ff_df['gender'] = pd.factorize(ff_df['gender'])[0]
ff_labels = ff_df['gender'].values

# images
ca_file_names = os.listdir(ca_image_path)
ff_file_names = np.array(sorted(os.listdir(ff_image_path), key=lambda x: int(x.split('.')[0])))

# select some data
select_num = 2000
ca_dsize = (256, 256)
ff_dsize = (224, 224)
ca_file_names = ca_file_names[:select_num]
ff_file_names = ff_file_names[:select_num]
ca_labels = ca_labels[:select_num]
ff_labels = ff_labels[:select_num]

# spilt the training set and test set
ca_x_train, ca_x_test, ca_y_train, ca_y_test = train_test_split(ca_file_names, ca_labels, test_size=0.2,
                                                                random_state=821)
ff_x_train, ff_x_test, ff_y_train, ff_y_test = train_test_split(ff_file_names, ff_labels, test_size=0.2,
                                                                random_state=821)

# retrain begins
# celeba
ca_idi = np.load('./logfile/generated_instances/celeba_discriminatory_instance.npy')
# 5%
retraining(ca_model, ca_x_train, ca_x_test, ca_y_train, ca_y_test, ca_idi, ca_image_path, ca_dsize, 'celebA', '5',
           106)
# 10%
retraining(ca_model, ca_x_train, ca_x_test, ca_y_train, ca_y_test, ca_idi, ca_image_path, ca_dsize, 'celebA', '10',
           223)
# 15%
retraining(ca_model, ca_x_train, ca_x_test, ca_y_train, ca_y_test, ca_idi, ca_image_path, ca_dsize, 'celebA', '15',
           353)
# 20%
retraining(ca_model, ca_x_train, ca_x_test, ca_y_train, ca_y_test, ca_idi, ca_image_path, ca_dsize, 'celebA', '20',
           500)
# 25%
retraining(ca_model, ca_x_train, ca_x_test, ca_y_train, ca_y_test, ca_idi, ca_image_path, ca_dsize, 'celebA', '25',
           667)
# 30%
retraining(ca_model, ca_x_train, ca_x_test, ca_y_train, ca_y_test, ca_idi, ca_image_path, ca_dsize, 'celebA', '30',
           858)

# FairFace
ff_idi = np.load('./logfile/generated_instances/ff_discriminatory_instance.npy')
# 5%
retraining(ff_model, ff_x_train, ff_x_test, ff_y_train, ff_y_test, ff_idi, ff_image_path, ff_dsize, 'FairFace', '5',
           106)
# 10%
retraining(ff_model, ff_x_train, ff_x_test, ff_y_train, ff_y_test, ff_idi, ff_image_path, ff_dsize, 'FairFace', '10',
           223)
# 15%
retraining(ff_model, ff_x_train, ff_x_test, ff_y_train, ff_y_test, ff_idi, ff_image_path, ff_dsize, 'FairFace', '15',
           353)
# 20%
retraining(ff_model, ff_x_train, ff_x_test, ff_y_train, ff_y_test, ff_idi, ff_image_path, ff_dsize, 'FairFace', '20',
           500)
# 25%
retraining(ff_model, ff_x_train, ff_x_test, ff_y_train, ff_y_test, ff_idi, ff_image_path, ff_dsize, 'FairFace', '25',
           667)
# 30%
retraining(ff_model, ff_x_train, ff_x_test, ff_y_train, ff_y_test, ff_idi, ff_image_path, ff_dsize, 'FairFace', '30',
           858)

"""
1. celebA accuracy
    - origin: 0.9661
    - 5%:  0.9300
    - 10%: 0.9350
    - 15%: 0.9725
    - 20%: 0.9500
    - 25%: 0.9425
    - 30%: 0.9075

2. FairFace accuracy
    - origin: 0.8092
    - 5%: 0.8100
    - 10%: 0.8525
    - 15%: 0.8025
    - 20%: 0.8575
    - 25%: 0.8050
    - 30%: 0.8300
"""
